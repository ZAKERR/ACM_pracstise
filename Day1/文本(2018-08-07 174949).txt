#include<cstdio>#include<iostream>#include<cstring>#include<algorithm>using namespace std;const int MOD=1e9+7; typedef long long ll;ll cache[101010];ll mod_pow(ll x, ll n, ll p){	ll res = 1;	while(n)	{		if(n & 1) res =res * x % p;		x = x * x % p;		n >>= 1;	}	return res;}ll comb(ll n, ll m, ll p){	if(m > n) return 0;	ll ret = 1;	m = min(n - m, m);	for(int i = 1; i <= m; i ++)	{		ll a = (n + i - m) % p;		ll b = i % p;		ret = ret * (a * mod_pow(b, p - 2, p) % p) % p;	}	return ret;}ll Lucas(ll n, ll m, ll p){	if(m == 0) return 1;	return comb(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;}ll fac(int x,int mod){	if(cache[x]!=-1)return cache[x];	ll ret;	ret=(fac(x-1,mod))%mod;	ret*=x;	ret%=mod;	cache[x]=ret;	return ret;}int main(){	memset(cache,-1,sizeof(cache));	cache[1]=1;	int t;	scanf("%d",&t);	while(t--)	{		int n,m;		scanf("%d%d",&n,&m);		int x,y;		for(int i=1; i<n; i++)scanf("%d%d",&x,&y);		ll ans=comb(n-1,m-1,MOD);		//printf("comb=%d\n",ans);		ans*=fac(m,MOD);		ans%=MOD;		printf("%lld\n",ans);	}	return 0;}